000000_00000_000000000000000000000   // nop                # 0x00                    nop
000011_00000_000000000000000000100   // jal  0x04          # 0x01    Main:           jal     TestMultiply             
000011_00000_000000000000000010001   // jal  0x11          # 0x02                    jal     TestDivide
000010_00000_000000000000000100110   // j    0x26          # 0x03                    j       Trap
001000_00000_010000000000000000001   // addi $8, $0, 1     # 0x04    TestMultiply:   addi    r8, r0, 0x0001          # set r8 = 1
001000_00000_010010000000000000010   // addi $9, $0, 2     # 0x05                    addi    r9, r0, 0x0002          # set r9 = 2
001000_00000_010100000000000001001   // addi $10, $0, 9    # 0x06                    addi    r10, r0, 0x0009         # set r10 = 9
000000_00000_0000001100_00000_100000  // add  $12, $0, $0   # 0x07                    add     r12, r0, r0             # set r12 = 0
000100_01001_010100000000000000111   // beq  $9, $10, 7    # 0x08    LoopMultiply:   beq     r9, r10, EndMultiply    # while(r9!=r10) do
000000_01000_0100100000_00000_011000  // mult $8, $9        # 0x09                    mult    r8, r9                      
000000_00000_0000001011_00000_010010  // mflo $11           # 0x0a                    mflo    r11                     # r11 = r8 * r9
001000_01001_010010000000000000001   // addi $9, $9, 1     # 0x0b                    addi    r9, r9, 0x0001          # r9 += 1
000000_00000_0101101000_00000_100000  // add  $8, $0, $11   # 0x0c                    add     r8, r0, r11             # r8 = r11
101011_01100_0100000000_00000_000000  // sw   $8, 0($12)    # 0x0d                    sw      r8, r12, 0x0000         # output r8 to memory
001000_01100_011000000000000000100   // addi $12, $12, 4   # 0x0e                    addi    r12, r12, 0x0004        # increment memory address
000010_00000_000000000000000001000   // j    0x08          # 0x0f                    j       LoopMultiply            # end while
000000_11111_0000000000_00000_001000  // jr   $31           # 0x10    EndMultiply:    jr      r31
001000_00000_010010000000000000010   // addi $9, $0, 2     # 0x11    TestDivide:     addi    r9, r0, 0x0002          # set r9 =  2
001000_00000_010100000000000000101   // addi $10, $0, 5    # 0x12                    addi    r10, r0, 0x0005         # set r10 =  5
001000_00000_010110000000000001011   // addi $11, $0, 11   # 0x13                    addi    r11, r0, 0x000b         # set r11 = 11
000000_01000_0100100000_00000_011010  // div  $8, $9        # 0x14                    div     r8, r9                      
000000_00000_0000001101_00000_010010  // mflo $13           # 0x15                    mflo    r13                     # r13 = r8/r9
000000_00000_0000001110_00000_010000  // mfhi $14           # 0x16                    mfhi    r14                     # r14 = r8%r9
101011_01100_0110100000_00000_000000  // sw   $13, 0($12)   # 0x17                    sw      r13, r12, 0x0000        # output r13 to memory
101011_01100_0111000000_00000_000100  // sw   $14, 4($12)   # 0x18                    sw      r14, r12, 0x0004        # output r14 to memory
001000_01100_011000000000000001000   // addi $12, $12, 8   # 0x19                    addi    r12, r12, 0x0008        # increment memory address
000000_01000_0101000000_00000_011010  // div  $8, $10       # 0x1a                    div     r8, r10
000000_00000_0000001101_00000_010010  // mflo $13           # 0x1b                    mflo    r13                     # r13 = r8/r10
000000_00000_0000001110_00000_010000  // mfhi $14           # 0x1c                    mfhi    r14                     # r14 = r8%r10
101011_01100_0110100000_00000_000000  // sw   $13, 0($12)   # 0x1d                    sw      r13, r12, 0x0000        # output r13 to memory
101011_01100_0111000000_00000_000100  // sw   $14, 4($12)   # 0x1e                    sw      r14, r12, 0x0004        # output r14 to memory
001000_01100_011000000000000001000   // addi $12, $12, 8   # 0x1f                    addi    r12, r12, 0x0008        # increment memory address
000000_01000_010110000000000_011010  // div  $8, $11       # 0x20                    div     r8, r11
000000_00000_0000001101_00000_010010  // mflo $13           # 0x21                    mflo    r13                     # r13 = r8/r11
000000_00000_0000001110_00000_010000  // mfhi $14           # 0x22                    mfhi    r14                     # r14 = r8%r11
101011_01100_0110100000_00000_000000  // sw   $13, 0($12)   # 0x23                    sw      r13, r12, 0x0000        # output r13 to memory
101011_01100_0111000000_00000_000100  // sw   $14, 4($12)   # 0x24                    sw      r14, r12, 0x0004        # output r14 to memory
000000_11111_0000000000_00000_001000  // jr   $31           # 0x25                    jr      r31
000010_00000_000000000000000100110   // j    0x26          # 0x26    Trap:           j       Trap                    # program end
000000_00000_000000000000000000000   // nop                # 0x27                    nop  
